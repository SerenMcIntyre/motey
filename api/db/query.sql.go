// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllFrequencyGroups = `-- name: GetAllFrequencyGroups :many
SELECT id, name FROM frequency_groups
`

func (q *Queries) GetAllFrequencyGroups(ctx context.Context) ([]FrequencyGroup, error) {
	rows, err := q.db.Query(ctx, getAllFrequencyGroups)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FrequencyGroup
	for rows.Next() {
		var i FrequencyGroup
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFrequenciesByGroup = `-- name: GetFrequenciesByGroup :many
SELECT id, name, frequency_group_id FROM frequencies WHERE frequency_group_id = $1
`

func (q *Queries) GetFrequenciesByGroup(ctx context.Context, frequencyGroupID pgtype.UUID) ([]Frequency, error) {
	rows, err := q.db.Query(ctx, getFrequenciesByGroup, frequencyGroupID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Frequency
	for rows.Next() {
		var i Frequency
		if err := rows.Scan(&i.ID, &i.Name, &i.FrequencyGroupID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTaskByID = `-- name: GetTaskByID :one
SELECT id, title_name, background, sticker, is_measured, measurement_unit, sticker_value, user_id FROM tasks WHERE id = $1
`

func (q *Queries) GetTaskByID(ctx context.Context, id pgtype.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTaskByID, id)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TitleName,
		&i.Background,
		&i.Sticker,
		&i.IsMeasured,
		&i.MeasurementUnit,
		&i.StickerValue,
		&i.UserID,
	)
	return i, err
}

const getTaskNotifications = `-- name: GetTaskNotifications :many
SELECT id, text, time, task_id, frequency_id FROM task_notifications WHERE task_id = $1
`

func (q *Queries) GetTaskNotifications(ctx context.Context, taskID pgtype.UUID) ([]TaskNotification, error) {
	rows, err := q.db.Query(ctx, getTaskNotifications, taskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TaskNotification
	for rows.Next() {
		var i TaskNotification
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.Time,
			&i.TaskID,
			&i.FrequencyID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserTasks = `-- name: GetUserTasks :many
SELECT id, title_name, background, sticker, is_measured, measurement_unit, sticker_value, user_id FROM tasks WHERE user_id = $1
`

func (q *Queries) GetUserTasks(ctx context.Context, userID pgtype.UUID) ([]Task, error) {
	rows, err := q.db.Query(ctx, getUserTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.TitleName,
			&i.Background,
			&i.Sticker,
			&i.IsMeasured,
			&i.MeasurementUnit,
			&i.StickerValue,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertTask = `-- name: InsertTask :one
INSERT INTO tasks (id, title_name, background, sticker, is_measured, measurement_unit, sticker_value, user_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title_name, background, sticker, is_measured, measurement_unit, sticker_value, user_id
`

type InsertTaskParams struct {
	ID              pgtype.UUID
	TitleName       string
	Background      string
	Sticker         []byte
	IsMeasured      bool
	MeasurementUnit pgtype.Text
	StickerValue    pgtype.Int4
	UserID          pgtype.UUID
}

func (q *Queries) InsertTask(ctx context.Context, arg InsertTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, insertTask,
		arg.ID,
		arg.TitleName,
		arg.Background,
		arg.Sticker,
		arg.IsMeasured,
		arg.MeasurementUnit,
		arg.StickerValue,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TitleName,
		&i.Background,
		&i.Sticker,
		&i.IsMeasured,
		&i.MeasurementUnit,
		&i.StickerValue,
		&i.UserID,
	)
	return i, err
}

const insertTaskNotification = `-- name: InsertTaskNotification :one
INSERT INTO task_notifications (id, text, time, task_id, frequency_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, text, time, task_id, frequency_id
`

type InsertTaskNotificationParams struct {
	ID          pgtype.UUID
	Text        string
	Time        pgtype.Time
	TaskID      pgtype.UUID
	FrequencyID pgtype.UUID
}

func (q *Queries) InsertTaskNotification(ctx context.Context, arg InsertTaskNotificationParams) (TaskNotification, error) {
	row := q.db.QueryRow(ctx, insertTaskNotification,
		arg.ID,
		arg.Text,
		arg.Time,
		arg.TaskID,
		arg.FrequencyID,
	)
	var i TaskNotification
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.Time,
		&i.TaskID,
		&i.FrequencyID,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (id, name, background)
VALUES ($1, $2, $3)
RETURNING id, name, background
`

type InsertUserParams struct {
	ID         pgtype.UUID
	Name       string
	Background string
}

func (q *Queries) InsertUser(ctx context.Context, arg InsertUserParams) (User, error) {
	row := q.db.QueryRow(ctx, insertUser, arg.ID, arg.Name, arg.Background)
	var i User
	err := row.Scan(&i.ID, &i.Name, &i.Background)
	return i, err
}
